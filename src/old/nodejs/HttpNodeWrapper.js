// Generated by CoffeeScript 1.9.3
(function() {
  var FormUrlencoded, Http, HttpNodeWrapper, Https, constants, url;

  Http = require('http');

  Https = require('https');

  FormUrlencoded = require('form-urlencoded');

  url = require("url");

  constants = require('constants');

  module.exports = HttpNodeWrapper = (function() {
    function HttpNodeWrapper() {}

    HttpNodeWrapper._makeParameters = function(params) {
      var property, query, value;
      if (params.length === 0) {
        '';
      }
      query = '?';
      for (property in params) {
        value = params[property];
        query += (encodeURIComponent(property)) + "=" + (encodeURIComponent(value)) + "&";
      }
      return query.slice(0, -1);
    };

    HttpNodeWrapper._getPath = function(resource, id, action, key) {
      if (key && id && action && id !== '' && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id) + "/" + encodeURIComponent(action) + "/" + encodeURIComponent(key);
      } else if (id && action && id !== '' && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id) + "/" + encodeURIComponent(action);
      } else if (id && id !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id);
      } else if (action && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(action);
      }
      return "/" + encodeURIComponent(resource);
    };

    HttpNodeWrapper._request = function(params, callback) {
      var action;
      if (params.href.slice(0, "https".length) === "https") {
        action = Https.request(params);
      } else {
        action = Http.request(params);
      }
      action.on('response', function(response) {
        var data;
        if (typeof window === "undefined" || window === null) {
          response.setEncoding('utf8');
        }
        data = "";
        response.on('data', function(chunk) {
          if (chunk) {
            return data += chunk;
          }
        });
        return response.on('end', function() {
          if (response.statusCode > 299) {
            response.content = data;
            return callback(response, null);
          } else if (data.length > 0) {
            return callback(null, JSON.parse(data));
          } else {
            return callback(null, {
              result: "ok"
            });
          }
        });
      });
      if ((params != null ? params.timeout : void 0) != null) {
        action.on('socket', function(socket) {
          socket.setTimeout(params.timeout);
          return socket.on('timeout', function() {
            return callback(socket, null);
          });
        });
      }
      action.on('error', function(error) {
        return callback(error, null);
      });
      if ((params.body != null)) {
        action.write(params.body);
      }
      return action.end();
    };

    HttpNodeWrapper.request = function(request, token, uri, encoding, callback) {
      var parts;
      if (uri == null) {
        uri = "https://api.moj.io/v1";
      }
      if (encoding == null) {
        encoding = null;
      }
      uri += HttpNodeWrapper._getPath(request.resource, request.id, request.action, request.key);
      console.log("Request:" + uri);
      parts = url.parse(uri);
      parts.method = request.method;
      parts.withCredentials = false;
      if ((request.parameters != null) && Object.keys(request.parameters).length > 0) {
        parts.path += HttpNodeWrapper._makeParameters(request.parameters);
      }
      parts.headers = {};
      parts.headers["MojioAPIToken"] = token;
      if ((request.headers != null)) {
        parts.headers += request.headers;
      }
      parts.headers["Content-Type"] = 'application/json';
      if ((request.body != null)) {
        if ((encoding != null)) {
          parts.body = FormUrlencoded.encode(request.body);
        } else {
          parts.body = request.body;
        }
      }
      return HttpNodeWrapper._request(parts, callback);
    };

    HttpNodeWrapper.redirect = function(params, callback) {
      return this.request(params, callback);
    };

    return HttpNodeWrapper;

  })();

  console.log(JSON.stringify(HttpNodeWrapper));

}).call(this);

//# sourceMappingURL=HttpNodeWrapper.js.map

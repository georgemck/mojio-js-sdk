// Generated by CoffeeScript 1.9.3
(function() {
  var FormUrlencoded, HttpNodeWrapper, MojioClient;

  HttpNodeWrapper = require('../HttpNodeWrapper');

  FormUrlencoded = require('form-urlencoded');

  module.exports = MojioClient = (function() {
    var defaults;

    defaults = {
      hostname: 'api.moj.io',
      port: '443',
      version: 'v1',
      scheme: 'https',
      signalr_scheme: 'http',
      signalr_port: '80',
      signalr_hub: 'ObserverHub',
      live: true
    };

    function MojioClient(options) {
      var base, base1, base2, base3, base4, base5, base6, base7;
      this.options = options;
      if (this.options == null) {
        this.options = {
          hostname: defaults.hostname,
          port: defaults.port,
          version: defaults.version,
          scheme: defaults.scheme,
          live: defaults.live
        };
      }
      if ((base = this.options).hostname == null) {
        base.hostname = defaults.hostname;
      }
      if ((base1 = this.options).port == null) {
        base1.port = defaults.port;
      }
      if ((base2 = this.options).version == null) {
        base2.version = defaults.version;
      }
      if ((base3 = this.options).scheme == null) {
        base3.scheme = defaults.scheme;
      }
      if ((base4 = this.options).signalr_port == null) {
        base4.signalr_port = defaults.signalr_port;
      }
      if ((base5 = this.options).signalr_scheme == null) {
        base5.signalr_scheme = defaults.signalr_scheme;
      }
      if ((base6 = this.options).signalr_hub == null) {
        base6.signalr_hub = defaults.signalr_hub;
      }
      this.options.application = this.options.application;
      this.options.secret = this.options.secret;
      this.conn = null;
      this.hub = null;
      this.connStatus = null;
      this.setToken(null);
      if ((base7 = this.options).tokenRequester == null) {
        base7.tokenRequester = this.getTokenId();
      }
    }


    /*
        Helpers
     */

    MojioClient.prototype.getResults = function(type, results) {
      var arrlength, i, j, len, len1, objects, ref, result;
      objects = [];
      if (results instanceof Array) {
        arrlength = results.length;
        for (i = 0, len = results.length; i < len; i++) {
          result = results[i];
          objects.push(new type(result));
        }
      } else if (results.Data instanceof Array) {
        arrlength = results.Data.length;
        ref = results.Data;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          result = ref[j];
          objects.push(new type(result));
        }
      } else if (result.Data !== null) {
        objects.push(new type(result.Data));
      } else {
        objects.push(new type(result));
      }
      return objects;
    };

    MojioClient._makeParameters = function(params) {
      var property, query, value;
      if (params.length === 0) {
        '';
      }
      query = '?';
      for (property in params) {
        value = params[property];
        query += (encodeURIComponent(property)) + "=" + (encodeURIComponent(value)) + "&";
      }
      return query.slice(0, -1);
    };

    MojioClient.prototype.getPath = function(resource, id, action, key) {
      if (key && id && action && id !== '' && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id) + "/" + encodeURIComponent(action) + "/" + encodeURIComponent(key);
      } else if (id && action && id !== '' && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id) + "/" + encodeURIComponent(action);
      } else if (id && id !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id);
      } else if (action && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(action);
      }
      return "/" + encodeURIComponent(resource);
    };

    MojioClient.prototype.dataByMethod = function(data, method) {
      switch (method.toUpperCase()) {
        case 'POST' || 'PUT':
          return this.stringify(data);
        default:
          return data;
      }
    };

    MojioClient.prototype.stringify = function(data) {
      return JSON.stringify(data);
    };

    MojioClient.prototype.request = function(request, callback, isOauth) {
      if (isOauth == null) {
        isOauth = false;
      }
      return HttpNodeWrapper(request, this.getTokenId(), "https://accounts.moj.io/v2", null, callback);
    };


    /*
        Authorize and Login
     */

    MojioClient.prototype.login_resource = 'Login';

    MojioClient.prototype.authorize = function(redirect_url, scope, callback) {
      var parts;
      if (scope == null) {
        scope = 'full';
      }
      if ((this.options != null) && (this.options.secret != null) && (this.options.username != null) && (this.options.password != null)) {
        return this._login(this.options.username, this.options.password, callback);
      } else {
        parts = {
          hostname: this.options.hostname,
          host: this.options.hostname,
          port: this.options.port,
          scheme: this.options.scheme,
          path: this.options.live ? '/OAuth2/authorize' : '/OAuth2Sandbox/authorize',
          method: 'Get',
          withCredentials: false
        };
        parts.path += "?response_type=token";
        parts.path += "&client_id=" + this.options.application;
        parts.path += "&redirect_uri=" + redirect_url;
        parts.path += "&scope=" + scope;
        parts.headers = {};
        if (this.getTokenId() != null) {
          parts.headers["MojioAPIToken"] = this.getTokenId();
        }
        parts.headers["Content-Type"] = 'application/json';
        return HttpNodeWrapper.redirect(parts, function(error, result) {
          this.setToken(result);
          if (callback == null) {
            return;
          }
          if (error != null) {
            callback(error, null);
          }
          return callback(null, result);
        });
      }
    };

    MojioClient.prototype.token = function(callback) {
      var match, token;
      this.user = null;
      token = this.options.tokenRequester();
      match = !!token && token[1];
      if (!match) {
        return callback("token for authorization not found.", null);
      } else {
        return this.request({
          method: 'GET',
          resource: this.login_resource,
          id: match
        }, (function(_this) {
          return function(error, result) {
            if (error) {
              return callback(error, null);
            } else {
              _this.setToken(result);
              return callback(null, _this.getToken());
            }
          };
        })(this));
      }
    };

    MojioClient.prototype.unauthorize = function(callback) {
      if ((this.options != null) && (this.options.secret != null) && (this.options.username != null) && (this.options.password != null)) {
        return this._logout(callback);
      } else if ((this.options != null) && (this.options.secret != null) && (this.options.application != null)) {
        return this._logout(callback);
      } else {
        this.setToken(null);
        return callback(null, "ok");
      }
    };

    MojioClient.prototype._login = function(username, password, callback) {
      return this.request({
        method: 'POST',
        resource: this.options.live ? '/OAuth2/token' : '/OAuth2Sandbox/token',
        body: {
          username: username,
          password: password,
          client_id: this.options.application,
          client_secret: this.options.secret,
          grant_type: 'password'
        }
      }, (function(_this) {
        return function(error, result) {};
      })(this), this.setToken(result), callback(error, result), true);
    };

    MojioClient.prototype.login = function(username, password, callback) {
      return this._login(username, password, (function(_this) {
        return function(error, result) {
          _this.setToken(result);
          return callback(error, result);
        };
      })(this));
    };

    MojioClient.prototype._logout = function(callback) {
      return this.request({
        method: 'DELETE',
        resource: this.login_resource,
        id: typeof mojio_token !== "undefined" && mojio_token !== null ? mojio_token : this.getTokenId()
      }, (function(_this) {
        return function(error, result) {};
      })(this), this.setToken(null), callback(error, result));
    };

    MojioClient.prototype.logout = function(callback) {
      return this._logout((function(_this) {
        return function(error, result) {
          _this.setToken(null);
          return callback(error, result);
        };
      })(this));
    };


    /*
        Token/User
     */

    MojioClient.prototype.isAuthorized = function() {
      return (this.auth_token != null) && (this.getToken() != null);
    };

    MojioClient.prototype.setToken = function(token) {
      if (token === null) {
        return this.auth_token = {
          _id: null,
          access_token: null
        };
      } else if (typeof token === 'object') {
        this.auth_token = token;
        if (!this.auth_token._id && (token.access_token != null)) {
          this.auth_token._id = token.access_token;
        } else if (!this.auth_token.access_token && (token._id != null)) {
          this.auth_token.access_token = token._id;
        }
        if ((this.auth_token.access_token == null) && (this.auth_token._id == null)) {
          this.auth_token.access_token = null;
          return this.auth_token._id = null;
        }
      } else {
        if (token != null) {
          return this.auth_token = {
            _id: token,
            access_token: token
          };
        }
      }
    };

    MojioClient.prototype.getToken = function() {
      return this.auth_token.access_token;
    };

    MojioClient.prototype.getTokenId = function() {
      return this.getToken();
    };

    MojioClient.prototype.getRefreshToken = function() {
      return this.auth_token.refresh_token;
    };

    MojioClient.prototype.getUserId = function() {
      if (this.auth_token.UserId) {
        return this.auth_token.UserId;
      }
      return null;
    };

    MojioClient.prototype.isLoggedIn = function() {
      return this.getUserId() !== null || (this.getToken() != null);
    };

    MojioClient.prototype.getCurrentUser = function(callback) {
      if ((this.user != null)) {
        callback(null, this.user);
      } else if (this.isLoggedIn()) {
        this.get(Login, this.getToken(), (function(_this) {
          return function(error, result) {
            if (error != null) {
              return callback(error, null);
            } else if ((result.UserId != null)) {
              return _this.get(User, result.UserId, function(error, result) {
                if (error != null) {
                  return callback(error, null);
                } else {
                  _this.user = result;
                  return callback(null, _this.user);
                }
              });
            } else {
              return callback("User not found", null);
            }
          };
        })(this));
      } else {
        callback("User not found", null);
        return false;
      }
      return true;
    };

    return MojioClient;

  })();

}).call(this);

//# sourceMappingURL=MojioAuth.js.map

// Generated by CoffeeScript 1.9.3
(function() {
  var Http, MojioClient, _;

  Http = require('../HttpNodeWrapper');

  _ = require('underscore');

  module.exports = MojioClient = (function() {
    var App, Mojio, Trip, User, Vehicle, defaults, mojio_models;

    defaults = {
      url: 'https://api.moj.io/v1',
      live: true,
      token: null
    };

    function MojioClient(options) {
      if (options == null) {
        options = defaults;
      }
      this.configure(options);
    }

    MojioClient.prototype.configure = function(options) {
      if (options == null) {
        options = {};
      }
      _.extend(this, options);
      return this;
    };


    /*
        Helpers
     */

    MojioClient.prototype.getResults = function(type, results) {
      var arrlength, i, j, len, len1, objects, ref, result;
      objects = [];
      if (results instanceof Array) {
        arrlength = results.length;
        for (i = 0, len = results.length; i < len; i++) {
          result = results[i];
          objects.push(new type(result));
        }
      } else if (results.Data instanceof Array) {
        arrlength = results.Data.length;
        ref = results.Data;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          result = ref[j];
          objects.push(new type(result));
        }
      } else if (result.Data !== null) {
        objects.push(new type(result.Data));
      } else {
        objects.push(new type(result));
      }
      return objects;
    };

    MojioClient.prototype.dataByMethod = function(data, method) {
      switch (method.toUpperCase()) {
        case 'POST' || 'PUT':
          return this.stringify(data);
        default:
          return data;
      }
    };

    MojioClient.prototype.stringify = function(data) {
      return JSON.stringify(data);
    };

    MojioClient.prototype.request = function(request, callback, isOauth) {
      var http, parts;
      if (isOauth == null) {
        isOauth = false;
      }
      parts = {
        hostname: this.options.hostname,
        host: this.options.hostname,
        port: this.options.port,
        scheme: this.options.scheme,
        path: (isOauth ? '' : '/' + this.options.version),
        method: request.method,
        withCredentials: false
      };
      parts.path = parts.path + this.getPath(request.resource, request.id, request.action, request.key);
      if ((request.parameters != null) && Object.keys(request.parameters).length > 0) {
        parts.path += MojioClient._makeParameters(request.parameters);
      }
      parts.headers = {};
      if (this.getTokenId() != null) {
        parts.headers["MojioAPIToken"] = this.getTokenId();
      }
      if ((request.headers != null)) {
        parts.headers += request.headers;
      }
      parts.headers["Content-Type"] = 'application/json';
      if ((request.body != null)) {
        if (isOauth) {
          parts.body = FormUrlencoded.encode(request.body);
        } else {
          parts.body = request.body;
        }
      }
      http = new Http();
      return http.request(parts, callback);
    };

    mojio_models = {};

    App = require('../models/App');

    mojio_models['App'] = App;

    Mojio = require('../models/Mojio');

    mojio_models['Mojio'] = Mojio;

    Trip = require('../models/Trip');

    mojio_models['Trip'] = Trip;

    User = require('../models/User');

    mojio_models['User'] = User;

    Vehicle = require('../models/Vehicle');

    mojio_models['Vehicle'] = Vehicle;

    MojioClient.prototype.model = function(type, json) {
      var data, i, len, object, ref;
      if (json == null) {
        json = null;
      }
      if (json === null) {
        return mojio_models[type];
      } else if ((json.Data != null) && json.Data instanceof Array) {
        object = json;
        object.Objects = new Array();
        ref = json.Data;
        for (i = 0, len = ref.length; i < len; i++) {
          data = ref[i];
          object.Objects.push(new mojio_models[type](data));
        }
      } else if ((json.Data != null)) {
        object = new mojio_models[type](json.Data);
      } else {
        object = new mojio_models[type](json);
      }
      object._client = this;
      return object;
    };

    MojioClient.prototype.query = function(model, parameters, callback) {
      var property, query_criteria, ref, value;
      return this;
      if (parameters instanceof Object) {
        if (parameters.criteria instanceof Object) {
          query_criteria = "";
          ref = parameters.criteria;
          for (property in ref) {
            value = ref[property];
            query_criteria += property + "=" + value + ";";
          }
          parameters.criteria = query_criteria;
        }
        return this.request({
          method: 'GET',
          resource: model.resource(),
          parameters: parameters
        }, (function(_this) {
          return function(error, result) {
            return callback(error, _this.model(model.model(), result));
          };
        })(this));
      } else if (typeof parameters === "string") {
        return this.request({
          method: 'GET',
          resource: model.resource(),
          parameters: {
            id: parameters
          }
        }, (function(_this) {
          return function(error, result) {
            return callback(error, _this.model(model.model(), result));
          };
        })(this));
      } else {
        return callback("criteria given is not in understood format, string or object.", null);
      }
    };

    MojioClient.prototype.get = function(model, criteria, callback) {
      return this.query(model, criteria, callback);
    };

    MojioClient.prototype.save = function(model, callback) {
      return this;
      return this.request({
        method: 'PUT',
        resource: model.resource(),
        body: model.stringify(),
        parameters: {
          id: model._id
        }
      }, callback);
    };

    MojioClient.prototype.put = function(model, callback) {
      return this.save(model, callback);
    };

    MojioClient.prototype.create = function(model, callback) {
      return this.request({
        method: 'POST',
        resource: model.resource(),
        body: model.stringify()
      }, callback);
    };

    MojioClient.prototype.post = function(model, callback) {
      return this;
      return this.create(model, callback);
    };

    MojioClient.prototype["delete"] = function(model, callback) {
      return this.request({
        method: 'DELETE',
        resource: model.resource(),
        parameters: {
          id: model._id
        }
      }, callback);
    };


    /*
            Schema
     */

    MojioClient.prototype._schema = function(callback) {
      return this.request({
        method: 'GET',
        resource: 'Schema'
      }, callback);
    };

    MojioClient.prototype.schema = function(callback) {
      return this._schema((function(_this) {
        return function(error, result) {
          return callback(error, result);
        };
      })(this));
    };


    /*
        Storage
     */

    MojioClient.prototype.store = function(model, key, value, callback) {
      if (!model || !model._id) {
        return callback("Storage requires an object with a valid id.");
      } else {
        return this.request({
          method: 'PUT',
          resource: model.resource(),
          id: model.id(),
          action: 'store',
          key: key,
          body: JSON.stringify(value)
        }, (function(_this) {
          return function(error, result) {
            if (error) {
              return callback(error, null);
            } else {
              return callback(null, result);
            }
          };
        })(this));
      }
    };

    MojioClient.prototype.value = function(model, key, callback) {
      if (!model || !model._id) {
        return callback("Get of storage requires an object with a valid id.");
      } else {
        return this.request({
          method: 'GET',
          resource: model.resource(),
          id: model.id(),
          action: 'store',
          key: key
        }, (function(_this) {
          return function(error, result) {
            if (error) {
              return callback(error, null);
            } else {
              return callback(null, result);
            }
          };
        })(this));
      }
    };

    MojioClient.prototype.unstore = function(model, key, callback) {
      if (!model || !model._id) {
        return callback("Storage requires an object with a valid id.");
      } else {
        return this.request({
          method: 'DELETE',
          resource: model.resource(),
          id: model.id(),
          action: 'store',
          key: key
        }, (function(_this) {
          return function(error, result) {
            if (error) {
              return callback(error, null);
            } else {
              return callback(null, result);
            }
          };
        })(this));
      }
    };


    /*
        Token/User
     */

    MojioClient.prototype.isAuthorized = function() {
      return (this.auth_token != null) && (this.getToken() != null);
    };

    MojioClient.prototype.setToken = function(token) {
      if (token === null) {
        return this.auth_token = {
          _id: null,
          access_token: null
        };
      } else if (typeof token === 'object') {
        this.auth_token = token;
        if (!this.auth_token._id && (token.access_token != null)) {
          this.auth_token._id = token.access_token;
        } else if (!this.auth_token.access_token && (token._id != null)) {
          this.auth_token.access_token = token._id;
        }
        if ((this.auth_token.access_token == null) && (this.auth_token._id == null)) {
          this.auth_token.access_token = null;
          return this.auth_token._id = null;
        }
      } else {
        if (token != null) {
          return this.auth_token = {
            _id: token,
            access_token: token
          };
        }
      }
    };

    MojioClient.prototype.getToken = function() {
      return this.auth_token.access_token;
    };

    MojioClient.prototype.getTokenId = function() {
      return this.getToken();
    };

    MojioClient.prototype.getRefreshToken = function() {
      return this.auth_token.refresh_token;
    };

    MojioClient.prototype.getUserId = function() {
      if (this.auth_token.UserId) {
        return this.auth_token.UserId;
      }
      return null;
    };

    MojioClient.prototype.isLoggedIn = function() {
      return this.getUserId() !== null || (this.getToken() != null);
    };

    MojioClient.prototype.getCurrentUser = function(callback) {
      if ((this.user != null)) {
        callback(null, this.user);
      } else if (this.isLoggedIn()) {
        this.get(Login, this.getToken(), (function(_this) {
          return function(error, result) {
            if (error != null) {
              return callback(error, null);
            } else if ((result.UserId != null)) {
              return _this.get(User, result.UserId, function(error, result) {
                if (error != null) {
                  return callback(error, null);
                } else {
                  _this.user = result;
                  return callback(null, _this.user);
                }
              });
            } else {
              return callback("User not found", null);
            }
          };
        })(this));
      } else {
        callback("User not found", null);
        return false;
      }
      return true;
    };

    return MojioClient;

  })();

}).call(this);

//# sourceMappingURL=MojioREST.js.map

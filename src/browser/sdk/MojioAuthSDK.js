// Generated by CoffeeScript 1.9.3
(function() {
  var MojioAuthSDK, MojioModelSDK,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  MojioModelSDK = require('./MojioModelSDK');

  module.exports = MojioAuthSDK = (function(superClass) {
    var authorizeParameters, defaults, ref, ref1, ref2, setup, styleParameters, token, tokenParameters, unauthorizeParameters;

    extend(MojioAuthSDK, superClass);

    defaults = {};

    styleParameters = ['callback', 'promise', 'sync', 'subscribe', 'observable', 'async'];

    token = null;

    function MojioAuthSDK(options) {
      if (options == null) {
        options = {};
      }
      MojioAuthSDK.__super__.constructor.call(this);
      this.configure(options, defaults);
      this.user = null;
      this.state.client = this.client_id;
      this.state.secret = this.client_secret;
      this.state.site = this.site;
      this.state.tokenPath = this.tokenPath;
      this.state.authorizationPath = this.authorizationPath;
    }

    setup = function(parameters, match, name) {
      var property, results, value;
      if (typeof parameters === 'object') {
        results = [];
        for (property in parameters) {
          value = parameters[property];
          if ((indexOf.call(match, property) >= 0)) {
            results.push(eval("this." + property)(value));
          } else {
            throw new error("Parameter not used in " + name + " flow: " + property);
          }
        }
        return results;
      }
    };

    (ref = (authorizeParameters = ['username', 'password', 'credentials', 'scope', 'email'])).push.apply(ref, styleParameters);

    MojioAuthSDK.prototype.authorize = function(redirect_url, implicit) {
      if (implicit == null) {
        implicit = null;
      }
      if (implicit == null) {
        implicit = typeof document !== "undefined" && document !== null;
      }
      setup(redirect_url, authorizeParameters, 'authorize');
      this.state.setMethod("POST");
      this.state.setEndpoint("accounts");
      this.state.setResource("oauth2");
      this.state.setAction("authorize");
      if (this.sdk_env === 'browser' || implicit) {
        this.state.setBody({
          response_type: 'token',
          redirect_uri: redirect_url,
          client_id: this.client_id
        });
      } else if (this.sdk_env === 'nodejs') {
        this.state.setBody({
          response_type: 'code',
          redirect_uri: redirect_url,
          client_id: this.client_id
        });
      }
      return this;
    };

    (ref1 = (unauthorizeParameters = ['login', 'consent', 'loginAndConsent', 'prompt', 'parse', 'code'])).push.apply(ref1, styleParameters);

    MojioAuthSDK.prototype.unauthorize = function(redirect_url, implicit) {
      if (implicit == null) {
        implicit = null;
      }
      if ((typeof document !== "undefined" && document !== null) && (typeof implict === "undefined" || implict === null)) {
        implicit = true;
      } else {
        implicit = false;
      }
      setup(redirect_url, unauthorizeParameters, 'unauthorize');
      this.state.setMethod("POST");
      this.state.setEndpoint("accounts");
      this.state.setResource("oauth2");
      this.state.setAction("authorize");
      if (this.sdk_env === 'browser' || implicit) {
        this.state.setBody({
          response_type: 'token',
          redirect_uri: redirect_url,
          client_id: this.client_id
        });
      } else if (this.sdk_env === 'nodejs') {
        this.state.setBody({
          response_type: 'code',
          redirect_uri: redirect_url,
          client_id: this.client_id
        });
      }
      return this;
    };

    (ref2 = (tokenParameters = [])).push.apply(ref2, authorizeParameters);

    MojioAuthSDK.prototype.token = function(redirect_url) {
      var redirect_uri;
      if (redirect_url == null) {
        redirect_url = null;
      }
      if ((redirect_url != null)) {
        if (!setup(redirect_url, tokenParameters, 'token')) {
          redirect_uri = redirect_url;
        } else {
          redirect_uri = this.state.getBody().redirect_uri;
        }
      }
      this.state.setMethod("POST");
      this.state.setEndpoint("accounts");
      this.state.setResource("oauth2");
      this.state.setAction("token");
      this.state.setBody({
        client_id: this.client_id,
        client_secret: this.client_secret
      });
      if (redirect_uri != null) {
        this.state.setBody({
          redirect_uri: redirect_uri
        });
      }
      return this;
    };

    MojioAuthSDK.prototype.parse = function(return_url) {
      var code;
      if ((return_url != null) && (return_url.query != null) && (return_url.query.code != null)) {
        code = return_url.query.code;
        this.state.setBody({
          code: code,
          grant_type: 'authorization_code'
        });
        this.state.setCallback((function(_this) {
          return function(error, result) {
            if (error) {
              return console.log('Access Token Error', JSON.stringify(error.content) + "  message:" + error.statusMessage);
            } else {
              return _this.state.setToken(result);
            }
          };
        })(this));
      } else {
        if (return_url.location.hash === "") {
          this.state.setAnswer("");
        } else if ((return_url.location.hash != null)) {
          this.state.setToken(return_url.location.hash);
          this.state.setAnswer(return_url.location.hash);
        }
      }
      return this;
    };

    MojioAuthSDK.prototype.refresh = function(refresh_token) {
      this.state.setBody({
        refresh_token: refresh_token,
        grant_type: 'refresh_token'
      });
      return this;
    };

    MojioAuthSDK.prototype.login = function() {
      this.prompt({
        prompt: 'login'
      });
      return this;
    };

    MojioAuthSDK.prototype.consent = function() {
      this.prompt({
        prompt: 'consent'
      });
      return this;
    };

    MojioAuthSDK.prototype.loginAndConsent = function() {
      this.prompt({
        prompt: 'consent,login'
      });
      return this;
    };

    MojioAuthSDK.prototype.prompt = function(prompt) {
      if ((this.state.getBody().prompt != null) && ((this.state.getBody().prompt === 'login' && prompt.prompt === 'consent' || prompt === 'consent') || (this.state.getBody().prompt === 'consent' && prompt.prompt === 'login' || prompt === 'login'))) {
        this.state.setBody({
          prompt: 'consent,login'
        });
      } else if (typeof prompt === 'string') {
        this.state.setBody({
          prompt: prompt
        });
      } else if (prompt instanceof Array) {
        this.state.setBody({
          prompt: prompt.join()
        });
      } else {
        this.state.setBody(prompt);
      }
      return this;
    };

    MojioAuthSDK.prototype.scope = function(scopes) {
      var param;
      if (typeof scopes === 'string') {
        param = scopes.replace(/,/g, ' ');
        this.state.setBody({
          scope: param
        });
      } else {
        param = '';
        scopes.map(function(scope) {
          return param += scope + ' ';
        });
        this.state.setBody({
          scope: param.slice(0, -1)
        });
      }
      return this;
    };

    MojioAuthSDK.prototype.username = function(username) {
      this.state.setBody({
        username: username
      });
      return this;
    };

    MojioAuthSDK.prototype.email = function(email) {
      this.state.setBody({
        username: email
      });
      return this;
    };

    MojioAuthSDK.prototype.password = function(password) {
      this.state.setBody({
        password: password
      });
      return this;
    };

    MojioAuthSDK.prototype.credentials = function(usernameOrEmail_or_credentials, password) {
      var credentials;
      if (password == null) {
        password = null;
      }
      if (typeof usernameOrEmail_or_credentials === 'object') {
        credentials = usernameOrEmail_or_credentials;
      } else {
        credentials = {
          username: usernameOrEmail_or_credentials,
          password: password
        };
      }
      this.state.validator.credentials(credentials);
      credentials['grant_type'] = 'password';
      this.state.setBody(credentials);
      return this;
    };

    MojioAuthSDK.prototype["with"] = function(usernameOrEmail_or_credentials, password) {
      if (password == null) {
        password = null;
      }
      return this.credentials(usernameOrEmail_or_credentials, password);
    };

    return MojioAuthSDK;

  })(MojioModelSDK);

}).call(this);

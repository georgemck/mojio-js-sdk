// Generated by CoffeeScript 1.9.3
(function() {
  var HttpWrapperHelper, URL;

  URL = require('url-parse');

  module.exports = HttpWrapperHelper = (function() {
    function HttpWrapperHelper() {
      HttpWrapperHelper.__super__.constructor.call(this);
    }

    HttpWrapperHelper._makeParameters = function(params) {
      var property, query, value;
      if (params.length === 0) {
        '';
      }
      query = '?';
      for (property in params) {
        value = params[property];
        query += (encodeURIComponent(property)) + "=" + (encodeURIComponent(value)) + "&";
      }
      return query.slice(0, -1);
    };

    HttpWrapperHelper._getPath = function(resource, id, action, key) {
      if (key && id && action && id !== '' && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id) + "/" + encodeURIComponent(action) + "/" + encodeURIComponent(key);
      } else if (id && action && id !== '' && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id) + "/" + encodeURIComponent(action);
      } else if (id && id !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id);
      } else if (action && action !== '') {
        return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(action);
      }
      return "/" + encodeURIComponent(resource);
    };

    HttpWrapperHelper._parse = function(url, request, encoding, token) {
      var parts;
      parts = new URL(url);
      parts.path = parts.pathname;
      parts.method = request.method;
      parts.withCredentials = false;
      parts.params = '';
      if ((request.parameters != null) && Object.keys(request.parameters).length > 0) {
        parts.params = HttpWrapperHelper._makeParameters(request.parameters);
      }
      if ((request.params != null) && Object.keys(request.params).length > 0) {
        parts.params = HttpWrapperHelper._makeParameters(request.params);
      }
      parts.path += parts.params;
      parts.headers = {};
      if (token != null) {
        parts.headers["MojioAPIToken"] = token;
      }
      if ((request.headers != null)) {
        parts.headers += request.headers;
      }
      parts.headers['Accept'] = 'application/json';
      parts.headers["Content-Type"] = 'application/json';
      if ((request.body != null)) {
        if ((encoding != null)) {
          parts.headers["Content-Type"] = 'application/x-www-form-urlencoded';
          parts.body = FormUrlencoded.encode(request.body);
        } else {
          parts.body = request.body;
        }
        parts.data = parts.body;
      }
      if ((request.data != null)) {
        if ((encoding != null)) {
          parts.headers["Content-Type"] = 'application/x-www-form-urlencoded';
          parts.data = FormUrlencoded.encode(request.data);
        } else {
          parts.data = request.data;
        }
        parts.body = parts.data;
      }
      return parts;
    };

    return HttpWrapperHelper;

  })();

}).call(this);

// Generated by CoffeeScript 1.9.3
(function() {
  var HttpBrowserWrapper, HttpWrapperHelper, iHttpWrapper,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  HttpWrapperHelper = require('../helpers/HttpWrapperHelper');

  iHttpWrapper = require('../interfaces/iHttpWrapper');

  module.exports = HttpBrowserWrapper = (function(superClass) {
    var _parts, _request;

    extend(HttpBrowserWrapper, superClass);

    function HttpBrowserWrapper(token1, uri1, encoding1, requester1) {
      this.token = token1;
      this.uri = uri1 != null ? uri1 : 'https://api.moj.io/v1';
      this.encoding = encoding1 != null ? encoding1 : false;
      this.requester = requester1 != null ? requester1 : null;
      HttpBrowserWrapper.__super__.constructor.call(this);
    }

    _request = function(request, requester, callback) {
      var k, ref, v, xmlhttp;
      if ((typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null)) {
        xmlhttp = new XMLHttpRequest;
      } else {
        xmlhttp = requester;
      }
      xmlhttp.open(request.method, url, true);
      ref = request.headers;
      for (k in ref) {
        v = ref[k];
        xmlhttp.setRequestHeader(k, v);
      }
      xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState === 4) {
          if (xmlhttp.status >= 200 && xmlhttp.status <= 299) {
            return callback(null, JSON.parse(xmlhttp.responseText));
          } else {
            return callback(xmlhttp.statusText, null);
          }
        }
      };
      if (request.method === "GET") {
        return xmlhttp.send();
      } else {
        return xmlhttp.send(request.data);
      }
    };

    _parts = function(request, token, uri, encoding) {
      var parts;
      parts = url.parse(uri);
      parts.method = request.method != null ? request.method : "GET";
      if ((request.host == null) && (request.hostname != null)) {
        parts.host = request.hostname;
      }
      if (!((request.scheme != null) || (typeof window === "undefined" || window === null))) {
        parts.scheme = window.location.protocol.split(':')[0];
      }
      if (!request.scheme || request.scheme === 'file') {
        parts.scheme = 'https';
      }
      if (token != null) {
        parts.headers["MojioAPIToken"] = token;
      }
      parts.headers = request.headers != null ? request.headers : {};
      parts.data = request.data != null ? request.data : {};
      if (request.body != null) {
        parts.data = request.body;
      }
      parts.params = '';
      if (request.method === "GET" && (request.data != null) && request.data.length > 0) {
        parts.params = '?' + Object.keys(request.data).map(function(k) {
          return encodeURIComponent(k) + '=' + encodeURIComponent(request.data[k]);
        }).join('&');
      } else if ((request.parameters != null) && Object.keys(request.parameters).length > 0) {
        parts.params = HttpWrapperHelper._makeParameters(request.parameters);
      } else if ((request.params != null) && Object.keys(request.params).length > 0) {
        parts.params = HttpWrapperHelper._makeParameters(request.params);
      }
      return parts;
    };

    HttpBrowserWrapper.prototype.url = function(request) {
      var parts;
      parts = this._parts(request, this.token, this.uri, this.encoding);
      return parts.scheme + "://" + parts.host + ":" + parts.port + parts.path + parts.params;
    };

    HttpBrowserWrapper.prototype.request = function(request, callback) {
      var url;
      url = _parts(request, this.token, this.uri, this.encoding);
      return _request(parts, this.requester, callback);
    };

    HttpBrowserWrapper.prototype.redirect = function(params, callback) {
      var url;
      url = params.scheme + "://" + params.host + ":" + params.port + params.path;
      return window.location = url;
    };

    return HttpBrowserWrapper;

  })(iHttpWrapper);

}).call(this);

//# sourceMappingURL=HttpWrapper.js.map

// Generated by CoffeeScript 1.9.3
(function() {
  var MojioAuthSDK, MojioModelSDK,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MojioModelSDK = require('./MojioModelSDK');

  module.exports = MojioAuthSDK = (function(superClass) {
    var defaults, token;

    extend(MojioAuthSDK, superClass);

    defaults = {
      parseToken: (function(result) {
        var token;
        return token = result;
      }),
      site: 'https://accounts.moj.io',
      tokenPath: '/oauth2/token',
      authorizationPath: '/oauth2/authorize'
    };

    token = null;

    function MojioAuthSDK(options) {
      if (options == null) {
        options = {};
      }
      MojioAuthSDK.__super__.constructor.call(this);
      this.configure(options, defaults);
      this.user = null;
      this.state.client = this.client_id;
      this.state.secret = this.client_secret;
      this.state.site = this.site;
      this.state.tokenPath = this.tokenPath;
      this.state.authorizationPath = this.authorizationPath;
    }

    MojioAuthSDK.prototype.authorize = function(redirect_url, implicit) {
      if (implicit == null) {
        implicit = null;
      }
      if (implicit == null) {
        implicit = typeof document !== "undefined" && document !== null;
      }
      this.state.setMethod("POST");
      this.state.setEndpoint("accounts");
      this.state.setResource("oauth2");
      this.state.setAction("authorize");
      if (this.sdk_env === 'browser' || implicit) {
        this.state.setBody({
          response_type: 'token',
          redirect_uri: redirect_url,
          client_id: this.client_id
        });
      } else if (this.sdk_env === 'nodejs') {
        this.state.setBody({
          response_type: 'code',
          redirect_uri: redirect_url,
          client_id: this.client_id
        });
      }
      return this;
    };

    MojioAuthSDK.prototype.unauthorize = function(redirect_url, implicit) {
      if (implicit == null) {
        implicit = false;
      }
      this.state.setMethod("POST");
      this.state.setEndpoint("accounts");
      this.state.setResource("oauth2");
      this.state.setAction("authorize");
      if (this.sdk_env === 'browser' || implicit) {
        this.state.setBody({
          response_type: 'token',
          redirect_uri: redirect_url,
          client_id: this.client_id
        });
      } else if (this.sdk_env === 'nodejs') {
        this.state.setBody({
          response_type: 'code',
          redirect_uri: redirect_url,
          client_id: this.client_id
        });
      }
      return this;
    };

    MojioAuthSDK.prototype.login = function() {
      this.prompt({
        prompt: 'login'
      });
      return this;
    };

    MojioAuthSDK.prototype.consent = function() {
      this.prompt({
        prompt: 'consent'
      });
      return this;
    };

    MojioAuthSDK.prototype.loginAndConsent = function() {
      this.prompt({
        prompt: 'consent,login'
      });
      return this;
    };

    MojioAuthSDK.prototype.prompt = function(prompt) {
      if ((this.state.getBody().prompt != null) && (this.state.getBody().prompt === 'login' && prompt.prompt === 'consent') || (this.state.getBody().prompt === 'consent' && prompt.prompt === 'login')) {
        this.state.setBody({
          prompt: 'consent,login'
        });
      } else {
        this.state.setBody(prompt);
      }
      this.state.show();
      return this;
    };

    MojioAuthSDK.prototype.token = function() {
      var redirect_uri;
      redirect_uri = this.state.getBody().redirect_uri;
      this.state.setMethod("POST");
      this.state.setEndpoint("accounts");
      this.state.setResource("oauth2");
      this.state.setAction("token");
      this.state.setBody({
        client_id: this.client_id,
        client_secret: this.client_secret
      });
      if (redirect_uri != null) {
        this.state.setBody({
          redirect_uri: redirect_uri
        });
      }
      return this;
    };

    MojioAuthSDK.prototype.credentials = function(username_or_credentials, password) {
      var credentails;
      if (password == null) {
        password = null;
      }
      if (typeof username_or_credentials === 'object') {
        credentails = username_or_credentials;
      } else {
        credentails = {
          username: username_or_credentials,
          password: password,
          grant_type: 'password'
        };
      }
      this.state.setBody(credentails);
      return this;
    };

    MojioAuthSDK.prototype.parse = function(return_url, redirect_uri) {
      var code;
      if (redirect_uri == null) {
        redirect_uri = null;
      }
      if ((return_url != null) && (return_url.query != null) && (return_url.query.code != null) && (redirect_uri != null)) {
        code = return_url.query.code;
        this.state.setBody({
          code: code,
          grant_type: 'authorization_code'
        });
        if (redirect_uri != null) {
          this.state.setBody({
            redirect_uri: redirect_uri
          });
        }
        this.state.setCallback((function(_this) {
          return function(error, result) {
            if (error) {
              return console.log('Access Token Error', JSON.stringify(error.content) + "  message:" + error.statusMessage);
            } else {
              return _this.state.setToken(result);
            }
          };
        })(this));
      } else {
        if (return_url.location.hash === "") {
          this.state.setAnswer("");
        } else if ((return_url.location.hash != null)) {
          this.state.setToken(return_url.location.hash);
          this.state.setAnswer(return_url.location.hash);
        }
      }
      return this;
    };

    MojioAuthSDK.prototype.code = function(req) {
      var code;
      code = req.query.code;
      this.state.setBody({
        authorization_code: code
      });
      return this;
    };

    MojioAuthSDK.prototype.refresh = function(refresh_token) {
      this.state.setBody({
        refresh_token: 'some code',
        grant_type: 'refresh_token'
      });
      return this;
    };

    MojioAuthSDK.prototype.scope = function(scopes) {
      var param;
      param = '';
      scopes.map(function(scope) {
        return param += scope + ' ';
      });
      this.state.setBody({
        scope: param.slice(0, -1)
      });
      return this;
    };

    MojioAuthSDK.prototype.url = function() {
      return this.state.url();
    };

    MojioAuthSDK.prototype.redirect = function(redirectClass) {
      if (redirectClass == null) {
        redirectClass = null;
      }
      this.state.redirect(redirectClass);
      return this;
    };

    MojioAuthSDK.prototype.username = function(username) {
      this.state.setBody({
        username: username
      });
      return this;
    };

    MojioAuthSDK.prototype.email = function(email) {
      this.state.setBody({
        username: email
      });
      return this;
    };

    MojioAuthSDK.prototype.password = function(password) {
      this.state.setBody({
        password: password
      });
      return this;
    };

    MojioAuthSDK.prototype["with"] = function(usernameOrEmail, password) {
      this.state.setBody({
        username: usernameOrEmail,
        password: password
      });
      return this;
    };

    return MojioAuthSDK;

  })(MojioModelSDK);

}).call(this);

//# sourceMappingURL=MojioAuthSDK.js.map
